[build-system]
    build-backend = "poetry.core.masonry.api"
    requires      = ["poetry-core>=1.0.0"]

[tool.poetry]
    authors     = ["nate landau <valentina@natenate.org>"]
    description = "Valentina is a Discord bot that helps you run TTRPGs."
    homepage    = "https://github.com/natelandau/valentina"
    keywords    = []
    license     = "AGPL-3.0-or-later"
    name        = "valentina"
    readme      = "README.md"
    repository  = "https://github.com/natelandau/valentina"
    version     = "2.2.0"

    [tool.poetry.scripts] # https://python-poetry.org/docs/pyproject/#scripts
        valentina = "valentina.main:app"

    [tool.poetry.dependencies]
        aiofiles = "^23.2.1"
        arrow    = "^1.3.0"
        beanie   = "^1.25.0"
        boto3    = "^1.34.27"
        confz    = "^2.0.1"
        inflect  = "^7.0.0"
        loguru   = "^0.7.2"
        numpy    = "^1.26.3"
        py-cord  = "^2.4.1"
        pydantic = "^2.5.3"
        pygithub = "^2.1.1"
        python   = ">=3.11,<3.13"
        rich     = "^13.7.0"
        semver   = "^3.0.2"
        typer    = { extras = ["all"], version = "^0.9.0" }

    [tool.poetry.group.test.dependencies]
        dirty-equals   = "^0.7.1.post0"
        faker          = "^22.5.1"
        polyfactory    = "^2.14.1"
        pytest         = "^7.4.4"
        pytest-asyncio = "^0.21.1"
        pytest-clarity = "^1.0.1"
        pytest-env     = "^1.1.3"
        pytest-mock    = "^3.12.0"
        pytest-sugar   = "^0.9.7"
        pytest-xdist   = "^3.5.0"

    [tool.poetry.group.dev.dependencies]
        commitizen     = "^3.13.0"
        coverage       = "^7.4.0"
        mypy           = "^1.8.0"
        pdoc           = "^14.4.0"
        poethepoet     = "^0.24.4"
        pre-commit     = "^3.6.0"
        ruff           = "^0.2.0"
        shellcheck-py  = "^0.9.0.6"
        types-aiofiles = "^23.2.0.0"
        typos          = "^1.17.2"
        vulture        = "^2.11"

[tool.commitizen]
    bump_message               = "bump(release): v$current_version â†’ v$new_version"
    changelog_merge_prerelease = true
    tag_format                 = "v$version"
    update_changelog_on_bump   = true
    version                    = "2.2.0"
    version_files              = ["pyproject.toml:version", "src/valentina/__version__.py:__version__"]

[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
    exclude_lines = [
        'def __repr__',
        'except [\w\s\._]+ as .*:',
        'log\.critical',
        'log\.debug',
        'log\.error',
        'log\.exception',
        'log\.info',
        'log\.success',
        'log\.trace',
        'log\.warning',
        'pragma: no cover',
        'raise Abort',
        'raise Exit',
        'raise typer\.Exit',
    ]
    fail_under = 50
    precision = 1
    show_missing = true
    skip_covered = true

[tool.coverage.run]
    branch = true
    command_line = "--module pytest"
    data_file = "reports/.coverage"
    omit = [
        "src/valentina/__version__.py",
        "src/valentina/characters/add_from_sheet.py",
        "src/valentina/characters/buttons.py",
        "src/valentina/characters/reallocate_dots.py",
        "src/valentina/characters/spend_experience.py",
        "src/valentina/main.py",
        "src/valentina/models/bot.py",
        "src/valentina/models/errors.py",
        "src/valentina/utils/discord_utils.py",
        "src/valentina/utils/errors.py",
        "src/valentina/utils/logging.py",
        "src/valentina/utils/types.py",
        "src/valentina/views/*",
        "tests/*",
    ]
    source = ["src"]

[tool.coverage.xml]
    output = "reports/coverage.xml"

[tool.mypy] # https://mypy.readthedocs.io/en/latest/config_file.html
    disallow_any_unimported = false
    disallow_subclassing_any = false
    disallow_untyped_decorators = false
    disallow_untyped_defs = true
    exclude = [
        'cogs/test_cog.py',
        'tests/',           # TOML literal string (single-quotes, regex okay, no escaping necessary)
    ]
    follow_imports = "normal"
    ignore_missing_imports = true
    junit_xml = "reports/mypy.xml"
    no_implicit_optional = true
    pretty = false
    show_column_numbers = true
    show_error_codes = true
    show_error_context = true
    strict_optional = false
    warn_redundant_casts = true
    warn_unreachable = true
    warn_unused_ignores = true

[tool.pytest.ini_options]

    addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --junitxml=reports/pytest.xml --ignore=src/valentina/cogs/test_cog.py"
    asyncio_mode = "auto"
    env = [
        "VALENTINA_AWS_ACCESS_KEY_ID=access_key",
        "VALENTINA_AWS_SECRET_ACCESS_KEY=secred_access_key",
        "VALENTINA_S3_BUCKET_NAME=bucket",
        "VALENTINA_TEST_CONFIG_KEY=testing",
    ]
    filterwarnings = ["error", "ignore::DeprecationWarning"]
    markers = [
        "drop_db: drops the database before the test creating fresh data",
        "no_db: marks tests as not needing a database",
        "serial",
    ]
    testpaths = ["src", "tests"]
    xfail_strict = true

[tool.ruff] # https://github.com/charliermarsh/ruff

    exclude = [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".hg",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".pytype",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "dist",
        "node_modules",
        # "src/valentina/cogs/test_cog.py",
        "venv",
    ]
    fix = true
    line-length = 100
    output-format = "grouped"
    src = ["src", "tests"]
    target-version = "py311"
    [tool.ruff.lint]
        # Avoiding flagging (and removing) `V101` from any `# noqa`
        # directives, despite Ruff's lack of support for `vulture`.
        external = ["V"]
        ###################################################
        ignore = [
            "B006",
            "B008",
            "D107",
            "D203",
            "D204",
            "D213",
            "D215",
            "D404",
            "D406",
            "D407",
            "D408",
            "D409",
            "D413",
            "E266",
            "E501",
            "ISC001",
            "N805",
            "PGH003",
            "PLR0913",
            "PLR0917",
            "S307",
            "S311",
            "UP007",
        ]
        ignore-init-module-imports = true

        per-file-ignores = { "cli.py" = [
            "PLR0912",
            "PLR0913",
        ], "tests/*.py" = [
            "A002",
            "A003",
            "D102",
            "F403",
            "PLR0913",
            "PLR2004",
            "S101",
        ], "tests/database/*.py" = [
            "A002",
            "A003",
            "PLR0913",
            "PLR2004",
            "S101",
        ], "src/valentina/cogs/*.py" = [
            "PLR0904",
            "PLR6301",
        ], "src/valentina/utils/converters.py" = [
            "PLR6301",
        ] }
        preview = true
        select = [
            "A",     # flake8-builtins
            "ARG",   # flake8-unused-arguments
            "ASYNC", # flake8-async
            "B",     # flake8-bugbear
            "BLE",   # flake8-blind-exception
            "C4",    # flake8-comprehensions
            "C90",   # McCabe
            "D",     # pydocstyle
            "E",     # pycodestyle Errors
            "EM",    # flake8-errmsg
            "ERA",   # flake8-eradicate
            "EXE",   # flake8-executable
            "F",     # pyflakes
            "FA",    # flake8-future
            "FLY",   # flynt
            "FURB",  # refurb
            "I",     # iSort
            "ISC",   # flake8-implicit-str-concat
            "N",     # Pep8-naming
            "NPY",   # flake8-numpy
            "PERF",  # Perflint
            "PGH",   # pygrep-hooks
            "PL",    # pylint
            "PLC",   # pylint Convention
            "PLE",   # pylint Error
            "PLR",   # pylint Refactor
            "PLW",   # pylint Warning
            "PT",    # flake8-pytest-style
            "PTH",   # flake8-use-pathlib
            "Q",     # flake8-quotes
            "RET",   # flake8-return
            "RUF",   # Ruff-specific rules
            "S",     # flake8-bandit
            "SIM",   # flake8-simplify
            "T20",   # flake8-print
            "TID",   # flake8-tidy-imports
            "TRY",   # tryceratops
            "UP",    # pyupgrade
            "W",     # pycodestyle Warnings
            "YTT",   # flake8-2020
            # "DTZ",   # flake8-datetimez
        ]

        unfixable = ["E712", "ERA001", "F401", "F841", "UP007"]

        [tool.ruff.lint.mccabe]
            # Unlike Flake8, default to a complexity level of 10.
            max-complexity = 10

        [tool.ruff.lint.pydocstyle]
            convention = "google"

        [tool.ruff.lint.pylint]
            max-args = 6

[tool.ruff.format]
    indent-style              = "space"
    line-ending               = "auto"
    quote-style               = "double"
    skip-magic-trailing-comma = false

[tool.vulture] # https://pypi.org/project/vulture/
    exclude = ["test_cog.py"]
    # ignore_decorators = ["@app.route", "@require_*"]
    ignore_names = [
        "*_channel*",
        "*callback",
        "*interaction*",
        "Meta",
        "args",
        "kwargs",
        "manage_campaigns",
        "on_*",
        "request",
        "setup",
        "version",
    ]
    make_whitelist = false
    min_confidence = 80
    paths = ["src", "tests"]
    sort_by_size = true
    verbose = false

[tool.poe.tasks]

    [tool.poe.tasks.docs]
        cmd = """
    pdoc
      --docformat google
      --output-directory docs
      src/valentina
    """
        help = "Generate this package's docs"

    [tool.poe.tasks.lint]
        help = "Lint this package"

        [[tool.poe.tasks.lint.sequence]]
            shell = "ruff --preview --no-fix src/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "ruff format --check src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "poetry check"

        [[tool.poe.tasks.lint.sequence]]
            shell = "mypy --config-file pyproject.toml src/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "typos"

        [[tool.poe.tasks.lint.sequence]]
            shell = "vulture src/ tests/ --exclude src/valentina/cogs/test_cog.py"

        [[tool.poe.tasks.lint.sequence]]
            shell = "yamllint ."

[tool.poe.tasks.test]
    help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage xml"
