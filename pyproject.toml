[build-system]
    build-backend = "hatchling.build"
    requires      = ["hatchling"]

[project]
    authors = [{ name = "Nate Landau", email = "valentina@natenate.org" }]
    dependencies = [
        "aiofiles>=24.1.0",
        "arrow>=1.3.0",
        "audioop-lts>=0.2.1",
        "beanie>=1.26.0,<2.0.0",
        "boto3>=1.35.24,<2.0.0",
        "confz>=2.0.1,<3.0.0",
        "faker>=30.0.0",
        "flask-discord>=0.1.69",
        "inflect>=7.4.0",
        "jinjax[whitenoise]>=0.46",
        "loguru>=0.7.2",
        "markdown2>=2.5.0",
        "markupsafe>=2.1.5",
        "numpy>=2.1.1,<2.2.0",
        "py-cord>=2.6.1,<2.7.0",
        "pydantic>=2.9.2,<3.0.0",
        "pygithub>=2.4.0,<3.0.0",
        "quart-flask-patch>=0.3.0",
        "quart-session>=3.0.0",
        "quart-wtforms>=1.0.2",
        "quart>=0.19.6",
        "redis>=5.1.0,<6.0.0",
        "rich>=13.8.1",
        "semver>=3.0.2",
        "typer>=0.12.5,<0.13.0",
    ]
    description = "Valentina is a Discord bot that helps you run TTRPGs."
    license = "AGPL-3.0-or-later"
    name = "valentina"
    readme = "README.md"
    requires-python = ">=3.13"
    version = "3.0.4"
    [project.urls]
        homepage   = "https://github.com/natelandau/valentina"
        repository = "https://github.com/natelandau/valentina"

    [project.scripts]
        valentina = "valentina.run:cli"

[tool.uv]
    dev-dependencies = [
        "commitizen>=3.29.1",
        "coverage>=7.6.1",
        "dirty-equals>=0.8.0",
        "djlint>=1.35.2",
        "mypy>=1.11.2,<2.0.0",
        "poethepoet>=0.29.0",
        "polyfactory>=2.17.0",
        "pre-commit>=3.8.0",
        "pytest-asyncio>=0.24.0",
        "pytest-clarity>=1.0.1",
        "pytest-env>=1.1.5",
        "pytest-mock>=3.14.0",
        "pytest-sugar>=1.0.0",
        "pytest-xdist>=3.6.1",
        "pytest>=8.3.3",
        "ruff>=0.6.8",
        "shellcheck-py>=0.10.0.1",
        "types-aiofiles>=24.1.0.20240626",
        "typos>=1.24.6",
        "yamllint>=1.35.1",
    ]

[tool.commitizen]
    bump_message               = "bump(release): v$current_version â†’ v$new_version"
    changelog_merge_prerelease = true
    tag_format                 = "v$version"
    update_changelog_on_bump   = true
    version                    = "3.0.4"
    version_files              = ["src/valentina/__version__.py:__version__"]
    version_provider           = "pep621"

[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
    exclude_lines = [
        'def __repr__',
        'except [\w\s\._]+ as .*:',
        'log\.critical',
        'log\.debug',
        'log\.error',
        'log\.exception',
        'log\.info',
        'log\.success',
        'log\.trace',
        'log\.warning',
        'pragma: no cover',
        'raise Abort',
        'raise Exit',
        'raise typer\.Exit',
    ]
    fail_under = 50
    precision = 1
    show_missing = true
    skip_covered = true

[tool.coverage.run]
    branch = true
    command_line = "--module pytest"
    data_file = "reports/.coverage"
    omit = [
        "src/valentina/__version__.py",
        "src/valentina/bot.py",
        "src/valentina/discord/bot.py",
        "src/valentina/discord/cogs/*",
        "src/valentina/discord/views/*",
        "src/valentina/models/errors.py",
        "src/valentina/run.py",
        "src/valentina/utils/errors.py",
        "src/valentina/utils/logging.py",
        "tests/*",
    ]
    source = ["src"]

[tool.coverage.xml]
    output = "reports/coverage.xml"

[tool.djlint]
    extend_exclude = ".vscode, .github, .git, .ruff_cache, .pytest_cache, __pycache__, .mypy_cache, .venv, tests, src/valentina/discord, src/valentina/models, src/valentina/utils, src/valentina/views, tests"
    ignore         = "H030,H031,H021,H006,H013"
    # ignore_case    = true
    # format_attribute_template_tags = true
    blank_line_after_tag  = "load,extends,include,set"
    blank_line_before_tag = "load,extends,include,set"
    custom_html           = "PageLayout"
    indent                = 4
    max_blank_lines       = 1
    max_line_length       = 100
    use_gitignore         = true

[tool.mypy] # https://mypy.readthedocs.io/en/latest/config_file.html
    disallow_any_unimported = false
    disallow_subclassing_any = false
    disallow_untyped_decorators = false
    disallow_untyped_defs = true
    exclude = [
        'discord/cogs/test_cog.py',
        'tests/',                   # TOML literal string (single-quotes, regex okay, no escaping necessary)
    ]
    follow_imports = "normal"
    ignore_missing_imports = true
    junit_xml = "reports/mypy.xml"
    no_implicit_optional = true
    pretty = false
    show_column_numbers = true
    show_error_codes = true
    show_error_context = true
    strict_optional = false
    warn_redundant_casts = true
    warn_unreachable = true
    warn_unused_ignores = true

[tool.pytest.ini_options]

    addopts = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --junitxml=reports/pytest.xml --ignore=src/valentina/discord/cogs/test_cog.py"
    asyncio_default_fixture_loop_scope = "function"
    asyncio_mode = "auto"
    env = [
        "VALENTINA_AWS_ACCESS_KEY_ID=access_key",
        "VALENTINA_AWS_SECRET_ACCESS_KEY=secred_access_key",
        "VALENTINA_S3_BUCKET_NAME=bucket",
        "VALENTINA_TEST_CONFIG_KEY=testing",
    ]
    filterwarnings = ["error", "ignore::DeprecationWarning"]
    markers = [
        "drop_db: drops the database before the test creating fresh data",
        "no_db: marks tests as not needing a database",
        "serial",
    ]
    testpaths = ["tests"]
    xfail_strict = true

[tool.ruff] # https://github.com/charliermarsh/ruff

    exclude = [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".hg",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".pytype",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "dist",
        "node_modules",
        # "src/valentina/discord/cogs/test_cog.py",
        "venv",
    ]
    fix = true
    line-length = 100
    output-format = "grouped"
    src = ["src", "tests"]
    target-version = "py311"
    [tool.ruff.lint]
        ignore = [
            "ANN001",   # Missing type annotation for function argument `cls`
            "ANN002",   # Missing type annotation for `*args`
            "ANN003",   # Missing type annotation for `**kwargs`
            "ANN101",   # missing-type-self
            "ANN204",   # Missing return type annotation for special method `__init__`
            "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed,
            "ASYNC110", # Use `anyio.Event` instead of awaiting `anyio.sleep` in a `while` loop
            "B006",     # mutable-argument-default
            "B008",     # function-call-in-default-argument
            "COM812",   # Trailing comma missing"
            "CPY001",   # Missing copyright notice at top of file
            "D107",     # undocumented-public-init
            "D203",
            "D204",
            "D213",
            "D215",
            "D404",
            "D406",     # new-line-after-section-name
            "D407",     # dashed-underline-after-section
            "D408",     # section-underline-after-name
            "D409",     # section-underline-matches-section-length
            "D413",     # blank-line-after-last-section
            "DTZ",      # TODO: Fix naive datetime usage
            "E266",
            "E501",
            "FBT001",   # Boolean-typed positional argument in function definition
            "FBT002",   # Boolean-typed positional argument in function definition
            "FIX002",   # Line contains TODO, consider resolving the issue"
            "ISC001",   # single-line-implicit-string-concatenation
            "N805",     # invalid-first-argument-name-for-method
            "PD011",    # Use `.to_numpy()` instead of `.values`"
            "PGH003",
            "PIE796",   # Enum contains duplicate value
            "PLR0913",  # too-many-arguments
            "PLR0917",
            "RSE102",   # Unnecessary parentheses on raised exception"
            "S307",
            "S311",     # suspicious-non-cryptographic-random-usage
            "S603",     #`subprocess` call: check for execution of untrusted input
            "TD001",    # invalid-todo-tag
            "TD002",    # Missing author in TODO
            "TD003",    # Missing issue link on the line following this TODO
            "UP007",    # non-pep604-annotation
        ]
        per-file-ignores = { "scripts/*.py" = [
            "PLR0912",
            "PLR0913",
        ], "migrations/*.py" = [
            "ARG002",
            "PLR6301",
        ], "tests/*.py" = [
            "A002",
            "A003",
            "ANN201",  # Missing return type annotation
            "ARG001",  # Unused argument
            "D102",
            "ERA001",  # Commented out code
            "F403",
            "PLR0913",
            "PLR2004",
            "S101",
            "SLF001",  # Calling private method
        ], "tests/database/*.py" = [
            "A002",
            "A003",
            "PLR0913",
            "PLR2004",
            "S101",
        ], "src/valentina/discord/cogs/*.py" = [
            "PLR0904",
            "PLR6301",
        ], "src/valentina/utils/converters.py" = [
            "PLR6301",
        ] }
        select = ["ALL"]
        unfixable = ["E712", "ERA001", "F401", "F841", "UP007"]

        [tool.ruff.lint.mccabe]
            # Unlike Flake8, default to a complexity level of 10.
            max-complexity = 10

        [tool.ruff.lint.pydocstyle]
            convention = "google"

        [tool.ruff.lint.pylint]
            max-args = 6

[tool.ruff.format]
    indent-style              = "space"
    line-ending               = "auto"
    quote-style               = "double"
    skip-magic-trailing-comma = false

[tool.poe.tasks]

    [tool.poe.tasks.upgrade]
        help = "Upgrade packages and pre-commit hooks"
        shell = """
        echo "-- Upgrading packages --" &&
        uv lock --upgrade &&
        echo "-- Autoupdating pre-commit --" &&
        pre-commit autoupdate
        """

    [tool.poe.tasks.lint]
        help = "Lint this package"

        [[tool.poe.tasks.lint.sequence]]
            shell = "ruff check --no-fix src/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "ruff format --check src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "mypy --config-file pyproject.toml src/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "typos"

        [[tool.poe.tasks.lint.sequence]]
            shell = "yamllint ."

        [[tool.poe.tasks.lint.sequence]]
            cmd = """
                pre-commit run
                    --all-files
                    --color always
                """

[tool.poe.tasks.test]
    help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage xml"
