[build-system]
    build-backend = "poetry.core.masonry.api"
    requires      = ["poetry-core>=1.0.0"]

[tool.poetry]
    authors     = ["nate landau <valentina@natenate.org>"]
    description = "Valentina is a Discord bot that helps you run TTRPGs."
    homepage    = "https://github.com/natelandau/valentina"
    keywords    = []
    license     = ""
    name        = "valentina"
    readme      = "README.md"
    repository  = "https://github.com/natelandau/valentina"
    version     = "0.3.2"

    [tool.poetry.scripts] # https://python-poetry.org/docs/pyproject/#scripts
        valentina = "valentina.main:app"

    [tool.poetry.dependencies]
        arrow         = "^1.2.3"
        asyncio       = "^3.4.3"
        loguru        = "^0.7.0"
        numpy         = "^1.24.3"
        peewee        = "^3.16.2"
        py-cord       = "^2.4.1"
        python        = "^3.11"
        python-dotenv = "^1.0.0"
        semver        = "^3.0.1"
        shellingham   = "^1.4.0"
        typer         = { extras = ["all"], version = "^0.9.0" }

    [tool.poetry.group.test.dependencies]
        coverage               = "^7.2.2"
        pytest                 = "^7.3.1"
        pytest-clarity         = "^1.0.1"
        pytest-mock            = "^3.10.0"
        pytest-pretty-terminal = "^1.1.0"
        pytest-xdist           = "^3.2.1"

    [tool.poetry.group.dev.dependencies]
        black         = "^23.3.0"
        commitizen    = "^3.2.1"
        coverage      = "^7.2.5"
        interrogate   = "^1.5.0"
        mypy          = "^1.2.0"
        pdoc          = "^13.1.1"
        poethepoet    = "^0.20.0"
        pre-commit    = "^3.3.1"
        ruff          = "^0.0.270"
        sh            = "^2.0.3"
        shellcheck-py = "^0.9.0.2"
        typeguard     = "^4.0.0"
        vulture       = "^2.7"

[tool.black]
    line-length = 100

[tool.commitizen]
    bump_message             = "bump(release): v$current_version â†’ v$new_version"
    tag_format               = "v$version"
    update_changelog_on_bump = true
    version                  = "0.3.2"
    version_files            = ["pyproject.toml:version", "src/valentina/__version__.py:__version__"]

[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
    exclude_lines = [
        'def __repr__',
        'except [\w\s\._]+ as .*:',
        'log\.critical',
        'log\.debug',
        'log\.error',
        'log\.exception',
        'log\.info',
        'log\.success',
        'log\.trace',
        'log\.warning',
        'pragma: no cover',
        'raise Abort',
        'raise Exit',
        'raise typer\.Exit',
    ]
    fail_under = 50
    precision = 1
    show_missing = true
    skip_covered = true

[tool.coverage.run]
    branch = true
    command_line = "--module pytest"
    data_file = "reports/.coverage"
    omit = [
        "src/valentina/__version__.py",
        "src/valentina/bot.py",
        "src/valentina/character/*",
        "src/valentina/cogs/*",
        "src/valentina/main.py",
        "src/valentina/views/*",
    ]
    source = ["src"]

[tool.coverage.xml]
    output = "reports/coverage.xml"

[tool.interrogate]
    exclude            = ["build", "docs", "tests"]
    fail-under         = 90
    ignore-init-method = true
    verbose            = 2

[tool.mypy] # https://mypy.readthedocs.io/en/latest/config_file.html
    disallow_any_unimported = false
    disallow_subclassing_any = false
    disallow_untyped_decorators = false
    disallow_untyped_defs = true
    exclude = [
        'tests/', # TOML literal string (single-quotes, regex okay, no escaping necessary)
    ]
    follow_imports = "normal"
    ignore_missing_imports = true
    junit_xml = "reports/mypy.xml"
    no_implicit_optional = true
    pretty = false
    show_column_numbers = true
    show_error_codes = true
    show_error_context = true
    strict_optional = false
    warn_redundant_casts = true
    warn_unreachable = true
    warn_unused_ignores = true

[tool.pytest.ini_options]
    addopts        = "--color=yes --doctest-modules --exitfirst --failed-first --strict-config --strict-markers --verbosity=2 --junitxml=reports/pytest.xml"
    filterwarnings = ["error", "ignore::DeprecationWarning"]
    testpaths      = ["src", "tests"]
    xfail_strict   = true

[tool.ruff] # https://github.com/charliermarsh/ruff
    exclude = [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".hg",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".pytype",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "dist",
        "node_modules",
        "venv",
    ]
    # Avoiding flagging (and removing) `V101` from any `# noqa`
    # directives, despite Ruff's lack of support for `vulture`.
    external = ["V101"]
    fix = true
    ignore = [
        "B006",
        "B008",
        "D107",
        "D203",
        "D204",
        "D213",
        "D215",
        "D404",
        "D406",
        "D407",
        "D408",
        "D409",
        "D413",
        "E501",
        "N805",
        "PGH001",
        "PGH003",
        "PLR0913",
        "UP007",
    ]
    ignore-init-module-imports = true
    line-length = 100
    per-file-ignores = { "cli.py" = [
        "PLR0912",
        "PLR0913",
    ], "tests/*.py" = [
        "PLR0913",
        "PLR2004",
        "S101",
    ] }
    select = [
        "A",   # flake8-builtins
        "ARG", # flake8-unused-arguments
        "B",   # flake8-bugbear
        "BLE", # flake8-blind-exception
        "C40", # flake8-comprehensions
        "C90", # McCabe
        "D",   # pydocstyle
        "E",   # pycodestyle Errors
        "ERA", # flake8-eradicate
        "EXE", # flake8-executable
        "F",   # pyflakes
        "I",   # iSort
        "N",   # Pep8-naming
        "PGH", # pygrep-hooks
        "PLC", # pylint Convention
        "PLE", # pylint Error
        "PLR", # pylint Refactor
        "PLW", # pylint Warning
        "PT",  # flake8-pytest-style
        "PTH", # flake8-use-pathlib
        "Q",   # flake8-quotes
        "RET", # flake8-return
        "RUF", # Ruff-specific rules
        "S",   # flake8-bandit
        "SIM", # flake8-simplify
        "TID", # flake8-tidy-imports
        "UP",  # pyupgrade
        "W",   # pycodestyle Warnings
        "YTT", # flake8-2020
    ]
    src = ["src", "tests"]
    target-version = "py310"
    unfixable = ["ERA001", "F401", "F841", "UP007"]

    [tool.ruff.mccabe]
        # Unlike Flake8, default to a complexity level of 10.
        max-complexity = 10

    [tool.ruff.pydocstyle]
        convention = "google"

    [tool.ruff.pylint]
        max-args = 6

[tool.vulture] # https://pypi.org/project/vulture/
    # exclude = ["file*.py", "dir/"]
    # ignore_decorators = ["@app.route", "@require_*"]
    ignore_names = ["args", "kwargs", "request", "version"]
    # make_whitelist = true
    min_confidence = 80
    paths          = ["src", "tests"]
    sort_by_size   = true
    verbose        = false

[tool.poe.tasks]

    [tool.poe.tasks.docs]
        cmd = """
    pdoc
      --docformat google
      --output-directory docs
      src/valentina
    """
        help = "Generate this package's docs"

    [tool.poe.tasks.lint]
        help = "Lint this package"

        [[tool.poe.tasks.lint.sequence]]
            shell = "ruff --no-fix src/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "black --check src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "poetry check"

        [[tool.poe.tasks.lint.sequence]]
            shell = "mypy --config-file pyproject.toml src/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "vulture src/ tests/"

        [[tool.poe.tasks.lint.sequence]]
            shell = "yamllint ."

        [[tool.poe.tasks.lint.sequence]]
            shell = "interrogate -c pyproject.toml ."

[tool.poe.tasks.test]
    help = "Test this package"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
        cmd = "coverage xml"
