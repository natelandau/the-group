---
name: "Create Release"

on:
    workflow_dispatch:
    push:
        tags:
            - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    create-gh-release:
        name: Create Release
        runs-on: "ubuntu-latest"
        permissions:
            contents: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # ----------------------------------------------
            # Setup Python, uv, and install project dependencies
            # ----------------------------------------------

            - name: Setup Python, uv, and the package
              uses: ./.github/actions/uv-python-package

            # ----------------------------------------------
            #    Grab version number
            # ----------------------------------------------

            - name: Add version to environment vars
              run: |
                  PROJECT_VERSION=$(python -c 'import tomli; print(tomli.load(open("pyproject.toml", "rb"))["project"]["version"])')
                  echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

            # ----------------------------------------------
            # Confirm we did, in fact, update the version
            # ----------------------------------------------

            - name: Check if tag version matches project version
              run: |
                  TAG=$(git describe HEAD --tags --abbrev=0)
                  echo $TAG
                  echo $PROJECT_VERSION
                  if [[ "$TAG" != "v$PROJECT_VERSION" ]]; then exit 1; fi
                  echo "CURRENT_TAG=refs/tags/${TAG}" >> $GITHUB_ENV

            # ----------------------------------------------
            # Generate release notes
            # ----------------------------------------------

            # - name: Release Notes
            #   run: git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s' --no-merges >> ".github/RELEASE-TEMPLATE.md"

            - name: Get notes
              id: generate_notes
              uses: anmarkoulis/commitizen-changelog-reader@master
              with:
                  tag_name: ${{ env.CURRENT_TAG }}
                  changelog: CHANGELOG.md

            # ----------------------------------------------
            # Build draft release (Note: Will need to manually publish)
            # ----------------------------------------------

            - name: Create Release Draft
              uses: softprops/action-gh-release@v2
              with:
                  body: ${{join(fromJson(steps.generate_notes.outputs.notes).notes, '')}}
                  draft: false
                  make_latest: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    build-and-push-docker-image:
        needs: create-gh-release
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        env:
            REGISTRY: ghcr.io
            IMAGE_NAME: ${{ github.repository }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            # ----------------------------------------------
            # Publish the Docker container to the registry
            # ----------------------------------------------

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  flavor: latest=true
                  tags: |
                      type=ref,event=tag
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
                      type=semver,pattern={{major}}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to the Container registry
              if: github.event_name != 'pull_request'
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Valentina Noir Disord bot
